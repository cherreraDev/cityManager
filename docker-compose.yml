version: '3.8'

services:
  resource-service:
    build:
      context: ./resource-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_GROUPID=resource-service
      - KAFKA_CITY_GROUPID=resource-service-city  # Nuevo grupo para city-events
      - TOPIC_RESOURCE_UPDATES=resource-updates
      - TOPIC_CITY_EVENTS=city-events
      - PORT=8080
      - HOST=0.0.0.0
      - SHUTDOWN_TIMEOUT=10s
      - DB_USERNAME=user
      - DB_PASSWORD=userpassword
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=resources  # Cambiado de mydb a resources para consistencia
      - DB_TIMEOUT=10s
      - SECRET_KEY=secretos123
      - ENVIRONMENT=dev
      - INITIAL_RESOURCES=water:0,food:0,energy:0,minerals:0  # Nuevo
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - city-network

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_USER: user
      MYSQL_PASSWORD: userpassword
      MYSQL_DATABASE: resources  # Cambiado para coincidir con DB_NAME
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./resource-service/sql/init.sql:/docker-entrypoint-initdb.d/init.sql  # Nuevo
    networks:
      - city-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 20s
      retries: 10

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - city-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'  # Nuevo
    networks:
      - city-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 5s
      timeout: 20s
      retries: 10

  kafka-init:  # Nuevo servicio para crear topics
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - kafka
    networks:
      - city-network
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # Esperar a que Kafka est√© listo
      while ! kafka-topics --bootstrap-server kafka:9092 --list; do
        echo 'Waiting for Kafka...'
        sleep 1
      done
      
      # Crear topics si no existen
      kafka-topics --bootstrap-server kafka:9092 --create --topic resource-updates --partitions 3 --replication-factor 1 --if-not-exists
      kafka-topics --bootstrap-server kafka:9092 --create --topic city-events --partitions 3 --replication-factor 1 --if-not-exists
      
      echo 'Topics created successfully'
      "
    restart: on-failure

volumes:
  mysql-data:

networks:
  city-network:
    driver: bridge